kemeldingen godtar
    du at Google bruker informasjonen du sender inn, til å forbedre
    Google-produkter og -tjenester.Ser du Chromecasten din i
    <a href="$1" target="_blank">
    Google Home-appen</a>?JaNeiPrøvde ikkeHar du noen spesialprogramvare for VPN, proxy-tjener, brannmur eller NAS installert?UsikkerHvilket av disse alternativene beskriver nettverket ditt best?PC og Chromecast på samme Wifi-nettverkPC og Chromecast på ulike Wifi-nettverk (f.eks. 2,4 GHz og 5 GHz)PC er kablet og Chromecast er på WifiCast til en enhet:Cast til en enhetDirekteteksting (kun på engelsk)DirektetekstingDirekteteksting – $1Laster ned … $1 %Kan ikke laste ned talefiler. Prøv på nytt senere.Kan ikke installere talefiler. Enheten må oppdateres. Start enheten på nytt, og prøv igjen.Global Media ControlsVis enhetslistenSkjul enhetslistenKontroller mediene du casterRapportér problemer med Google CastVis andre Cast-økter{0,plural, =1{Gjest}other{Gjest (#)}}For å slette loggen for Gjestemodus, lukk alle gjestevinduer.{0,plural, =1{Gjest}other{# åpne gjestevinduer}}{0,plural, =1{Inkognito}other{# åpne inkognitovinduer}}{0,plural, =1{Inkognito}other{Inkognito (#)}}Du er inkognito$1: $2Satt på pauseKontoer og synkroniseringLogg påSynkronisering er slått på.Slå på synkroniseringSynkronisering er slått avSynkronisering deaktivertSynkroniseringen er satt på pause{0,plural, =1{Lukk # vindu}other{Lukk # vinduer}}PassordBetalingsmåterAdresser med merAndre profilerAdministrer profilerAdministratoren din har deaktivert andre profilerTilpass profilGjestFørste brukerStandardprofilPerson $1DegAgent XSuperheltSportyBusinessmannSkyggenMarsboerMegaTusenfrydPizzaelskerDribleBurgerPusKakemonsFidoJockeyLimonadePlystreSkybertSkyggeHvitt standardbrukerbildeBlågrønt standardbrukerbildeBlått standardbrukerbildeGrønt standardbrukerbildeOransje standardbrukerbildeFiolett standardbrukerbildeRødt standardbrukerbildeGult standardbrukerbildeSpionHeltIdrettsutøverForretningsmannNinjaRomvesenFantastisk-fjesGul og hvit blomstPizzastykkeFotballHamburgerKattCupcakeHundHestMartiniglassNoteSol og skyerStandard brukerbildeCorgiDrageElefantRevApePandaPingvinerSommerfuglKaninEnhjørningBasketballSykkelFuglOstNudlerSolbrillerSushiTamagotchiVinylplateAvokadoCappuccinoIskremIsvannMelonOnigiriPizzaSmørbrødIkke påloggetOrganisasjonen din tillater ikke at du slår på synkronisering med denne kontoenDu kan ikke bruke denne profilenAdministratoren din har gjort en endring for hele systemet som deaktiverer enkelte gamle profiler.For å fortsette, klikk på OK. Klikk deretter på Legg til person for å opprette en ny profil for e-postadressen din.For å fortsette, klikk på OK. Klikk deretter på Legg til person for å opprette en ny profil for $1-e-postadressen din.Du kan fjerne den gamle profilen din selv om du ikke har tilgang til den lenger.Denne kontoen er allerede i bruk på denne datamaskinen.Denne kontoen er allerede i bruk på denne datamaskinen, av $1.Logg avVelg en temafargeVelkommen, $1Gi profilen nytt navnLegg til et navn eller en etikett, for eksempel Jobb eller PersonligSkriv inn et profilnavnHopp overSlett profilVelkommen!Tilbake fra siden for valg av brukerbildeVelkommen til den nye profilen dinDenne kontoen administreres av $1Denne profilen administreres av $1 og krever at du oppretter en egen profil for kontoen $2Denne profilen administreres av $1. En ny profil for kontoen $2 kreves av $3.Denne enheten administreres. En ny profil for kontoen $1 kreves av enhetsadministratorenDenne enheten administreres av $1. En ny profil for kontoen $2 kreves av $1.Denne kontoen ($1) administreres av $2Enheten administreres av $1Enheten administreres av organisasjonen dinDu er i ferd med å legge til en administrert profil i denne nettleseren. Administratoren din har kontroll over profilen og tilgang til de tilhørende dataene. Bokmerker, logg, passord og andre innstillinger kan synkroniseres med kontoen din og administreres av administratoren.Du er i ferd med å legge til en administrert profil i denne nettleseren. Administratoren din har koncalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(
                    this,
                    createDuration(input - offset, 'm'),
                    1,
                    false
                );
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

export function getSetZone(input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

export function setOffsetToUTC(keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

export function setOffsetToLocal(keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

export function setOffsetToParsedOffset() {
    if (this._tzm != null) {
        this.utcOffset(this._tzm, false, true);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        } else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

export function hasAlignedHourOffset(input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

export function isDaylightSavingTime() {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

export function isDaylightSavingTimeShifted() {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {},
        other;

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted =
            this.isValid() && compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

export function isLocal() {
    return this.isValid() ? !this._isUTC : false;
}

export function isUtcOffset() {
    return this.isValid() ? this._isUTC : false;
}

export function isUtc() {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}
